import { app, BrowserWindow, dialog, ipcMain } from 'electron';
import { MainWindow } from './mainWindow';
import { aadClusterAuthType, MainWindowEvents } from "./constants";
import { SettingsService } from './settings';
import { ClusterManager, ICluster } from './cluster-manager';
import { httpHandler } from './httpHandler';
import { ConfigLoader } from './configLoader';
import { AADFactory, AADHandler } from './auth/aad';
import { AuthenticationManager } from './auth/authenticationManager';
import { unsecureAuthOption } from './auth/unsecure';
import { CertificateHandlerFactory } from './auth/certificate';

//TODO TEMP
process.env.NODE_TLS_REJECT_UNAUTHORIZED = '0';

// This allows TypeScript to pick up the magic constant that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
// declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  // eslint-disable-line global-require
  app.quit();
}

const createWindow = async () => {
  const bw = new BrowserWindow({
    show: false,
    height: 600,
    width: 800,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
      nodeIntegration: true
    }
  });

  const configLoader = new ConfigLoader(process.argv);
  const mainWindow = new MainWindow(bw, configLoader);

  const settingService = new SettingsService();
  const authenticationManager = new AuthenticationManager();

  const clusterManager = new ClusterManager(settingService, mainWindow, authenticationManager);

  //configure default auth options
  const aadAuth = new AADFactory(clusterManager);
  const certificateAuth = CertificateHandlerFactory(clusterManager);
  authenticationManager.registerAuthOption(aadAuth);
  authenticationManager.registerAuthOption(unsecureAuthOption);
  authenticationManager.registerAuthOption(certificateAuth);

  //CLUSTER DATA OPERATIONS
  ipcMain.on(MainWindowEvents.addCluster, (_, data: ICluster) => {
    clusterManager.addCluster(data);
    clusterManager.emitState();
  })

  ipcMain.on(MainWindowEvents.removeCluster, (_, data: ICluster) => {
    clusterManager.removeCluster(data.id);
    clusterManager.emitState();
  })

  ipcMain.on(MainWindowEvents.editCluster, (_, data: ICluster) => {
    clusterManager.updateCluster(data);
    clusterManager.emitState();
  })

  ipcMain.on(MainWindowEvents.reconnectCluster, (_, data: ICluster) => {
    clusterManager.reconnectCluster(data);
    clusterManager.emitState();
  })

  ipcMain.on(MainWindowEvents.disconnectCLuster, (_, data: ICluster) => {
    clusterManager.discconnectCluster(data.id);
    clusterManager.emitState();
  })

  ipcMain.on(MainWindowEvents.importCLusters, (_, data: ICluster[]) => {
    clusterManager.bulkImport(data);
    clusterManager.emitState();
  })

  //TODO consider moving this?
  ipcMain.on(MainWindowEvents.logoutOfAadAccount, async (_, data: string) => {
    Object.keys(clusterManager.httpHandlers).forEach(clusterId => {
      const httpHandler = clusterManager.httpHandlers[clusterId];
      if(httpHandler.transformer.type === aadClusterAuthType) {
        if ((httpHandler.transformer as AADHandler).getMetaData().metadata.tenant === data) {
          clusterManager.discconnectCluster(clusterId)
        }
      }
    })
    await aadAuth.logout(data);
  })

  ipcMain.on(MainWindowEvents.requestAADConfigurations, (_) => {
    aadAuth.emitAccountsAndTenants();
  })

  ipcMain.on(MainWindowEvents.requestClusterState, (_) => {
    clusterManager.emitState();
  })
  
  //EXPOSED ELECTRON OPERATIONS
  ipcMain.handle(MainWindowEvents.sendHttpRequest, async (event, data: any) => {
    try {
      const cluster = clusterManager.windowToCluster[event.sender.id];
      const hh: httpHandler = clusterManager.httpHandlers[cluster.id];
      return await hh.requestAsync(data)
    } catch(e) {
      throw e;
    }
  })

  ipcMain.handle(MainWindowEvents.requestFileDialog, async (_, data: string) => {
    return await dialog.showOpenDialog({
      properties: ['openFile']
    })
  })

  //SEND DATA TO RENDERERS
  clusterManager.observable.subscribe(data => {
    bw.webContents.send(MainWindowEvents.clusterStatesChange, data);
  })

  aadAuth.observable.subscribe(data => {
    bw.webContents.send(MainWindowEvents.AADConfigurationsChange, data);
  })

  //TODO load extensions here

  await mainWindow.loadAsync();
  clusterManager.emitState();

};

app.on('ready', createWindow);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});